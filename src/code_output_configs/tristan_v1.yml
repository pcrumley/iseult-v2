# A yaml file that describes how data are saved in the HDF5
# files for tristan-v1 simulations. I will document the yml file 
# inline. 

name:
  Tristan_MP

# List of regex that must be in every valid output of the simulation you expect iseult to visit
expected_output_files:
  - prtl.tot.*
  - flds.tot.*
  - spect.*
  - param.*
 
# The code uses expected_output_files to decide how to enumerate & iterate
# over the run. For each output point of the simulation, the code
# assumes that each regex in the file dictionary returns each of 
# files. So in this instance we would expect something like:
#   
#   - prtl.tot.005, flds.tot.005, spect.005, param.005
#   - prtl.tot.006, flds.tot.006, spect.006, param.006
#   ...

h5_files_list:
  prtl.tot.*:
    # for each hdf5 file, you need to list all of the h5attributes
    # you need access to. As the code is written now, this attrs
    # MUST BE UNIQUE.
    - che
    - chi
    - gammae
    - gammai
    - inde
    - indi
    - proce
    - proci
    - ue
    - ui
    - ve
    - vi
    - we
    - wi
    - xe
    - xi
    - ye
    - yi
    - ze
    - zi
  flds.tot.*:
    - bx
    - by
    - bz
    - dens
    - densi
    - ex
    - ey
    - ez
    - jx
    - jy
    - jz
    - v3x
    - v3xi
    - v3y
    - v3yi
    - v3z
    - v3zi
  param.*:
    - acool
    - bphi
    - btheta
    - c
    - c_omp
    - caseinit
    - cooling
    - delgam
    - dlapion
    - dlaplec
    - dummy
    - gamma0
    - interval
    - istep
    - istep1
    - me
    - mi
    - mx
    - mx0
    - my
    - my0
    - mz0
    - ntimes
    - pltstart
    - ppc0
    - qi
    - sigma
    - sizex
    - sizey
    - splitratio
    - stride
    - testendion
    - testendlec
    - teststarti
    - teststartl
    - time
    - torqint
    - walloc
    - xinject2
  spect.*:
    # - dens There is an attr in spect called dens, but we
    # ignore it because of the limitation that there can be
    # no collision in the keys.
    - dgam
    - gamma
    - gmax
    - gmin
    - spece
    - specerest
    - specp
    - specprest
    - umean
    - xsl
# the axes dictionary of the yml file explains how to
# create a 1D axis that corresponds to the x, y, & z
# axis of the rectilinear grid saved in the flds.tot
# files.
#
# You must define an x, y, & z axis. On top of that
# you must define the label you want to show when 
# the fiels are plotted, as well as an expression that
# defines how to calculate the axis.
#
# The way the expressions works is that every thing that is 
# defined as a key in the hdf5_files_dict files is accessible
# using that name. In addition, you have access to a subset of
# numpy functions as well as custom defined functions. See
# ./src/utils/my_parser.py
#
axes:
  x:
    label: $x\ [c/\omega_{pe}]$
    expr: arange(take(shape(bx), 2)) * istep / c_omp
  y:
    label: $y\ [c/\omega_{pe}]$
    expr: arange(take(shape(bx), 1)) * istep / c_omp
  z:
    label: $z\ [c/\omega_{pe}]$
    expr: arange(take(shape(bx), 0)) * istep / c_omp

#
# the params don't need a label as they are not plotted
#
param:
  c_omp:
    expr: c_omp
  istep:
    expr: istep
  me:
    expr: me
  mi:
    expr: mi
  ppc0:
    expr: ppc0
  qi:
    expr: qi
  sigma:
    expr: null
  stride:
    expr: stride
  time:
    expr: time


#
#  PARTICLES:
#
# the prtls dictionary is how iseult knows how to plot prtl
# quantities. The structure is like:
# prtls:
#   SPECIES_NAME:
#     hist_cbar_label: # The label plotted in the histogram 
#                      # colorbars
#     attrs: # list of all attributes that must have a label
#            # and an expression that is parsed to a 1D arr
#            # of len N, where N is the number of particles
#            # of a particular species saved at a tstep
#
#       attr_name: # this name doesn't matter, just how a 
#                  # particular attr is chosen in the GUI.
#        
#         expr:  # The expression that parses to the 1D array of
#                # len N.
#
#         label: # axis label
#        
#

prtls:

  electrons:
    hist_cbar_label: $f_e (p)$
    attrs:
      KE:
        expr: sqrt(ue*ue + pow(ve,2) + we*we + 1) - 1
        label: $KE_e$
      gamma:
        expr: sqrt(ue*ue + pow(ve,2) + we*we + 1)
        label: $\gamma_e$
      index:
        expr: inde
        label: $\mathrm{ind}_e$
      proc:
        expr: proce
        label: $\mathrm{proc}_e$
      px:
        label: $\gamma_e\beta_{e,x}$
        expr: ue
      py:
        label: $\gamma_e\beta_{e,y}$
        expr: ve
      pz:
        label: $\gamma_e\beta_{e,z}$
        expr: we
      x:
        label: $x\ [c/\omega_{pe}]$
        expr: xe * pow(c_omp, -1)
      y:
        label: $y\ [c/\omega_{pe}]$
        expr: ye * pow(c_omp, -1)
      z:
        label: $z\ [c/\omega_{pe}]$
        expr: ze * pow(c_omp, -1)

  ions:
    hist_cbar_label: $f_i (p)$
    attrs:
      KE:
        label: $KE_i$
        expr: sqrt(ui*ui + pow(vi,2) + wi*wi + 1) -1
      gamma:
        label: $\gamma_i$
        expr: sqrt(ui*ui + pow(vi,2) + wi*wi + 1)
      index:
        label: $\mathrm{ind}_i$
        expr: indi
      proc:
        label: $\mathrm{proc}_i$
        expr: proci
      px:
        label: $\gamma_i\beta_{i,x}$
        expr: ui
      py:
        label: $\gamma_i\beta_{i,y}$
        expr: vi
      pz:
        label: $\gamma_i\beta_{i,z}$
        expr: wi
      x:
        label: $x\ [c/\omega_{pe}]$
        expr: xi * pow(c_omp, -1)
      y:
        label: $y\ [c/\omega_{pe}]$
        expr: yi * pow(c_omp, -1)
      z:
        label: $z\ [c/\omega_{pe}]$
        expr: zi * pow(c_omp, -1)

#
#   SCALAR FIELDS:
#
#   This quanties can be plotted as a line or
#   as a 2D image of a slice of the field quantity.
#   
#   Hopefully the structure is very similar to prtls and makes
#   sense.
#
#   scalar_flds:
#     FLD_NAME: # Name of the field for GUI
#       label: LABEL # axis or 2D label.
#       expr: EXPR # Expression that parses to a 3D array of shape
#                  # (nz, ny, nx) where nz, ny, nx are the length of
#                  # the axes arrays defined above

scalar_flds:
  B_total:
    label: $|B|$
    expr: sqrt(pow(bx,2) + by*by + bz*bz)
  density:
    label: $n$
    expr: dens
  electron_density:
    label: $n_e$
    expr: dens - densi
  ion_density:
    label: $n_i$
    expr: densi
  rho:
    label: $\rho$
    expr: 2*densi - dens
  theta_B:
    label: $\theta_B$
    expr: arctan2(sqrt(by*by+bz*bz), bx)
  E_dot_B:
    label: $E\cdot B$
    expr: ex*bx + ey*by + ez*bz

# Must define a way to calculate time at each output in units 1/c_omp.
# this is used in the scalar vs time plot, and in the future it will be
# a way of synchronizing the simulations
time: time

#
# Very similar to flds and prtls. however scalars must evaluate to a 
# single number. Used in the scalar vs time plot.
#
#   scalars:
#     SCALAR_NAME: # Name of the scalar quantity for GUI
#       label: LABEL # label for the lengend.
#       expr: EXPR # Expression that parses to a single number
#
scalars:
  Total KE_e:
    expr: sum(sqrt(ue * ue + pow(ve, 2) + we * we + 1) -1) * stride * abs(qi) * c * c
    label: ${\rm KE_e}$
  Total KE_i:
    expr: sum(sqrt(ui * ui + vi * vi + wi * wi + 1) -1) * stride * abs(qi) * c * c * mi / me
    label: ${\rm KE_i}$
  E_zSq:
    expr: sum(ez*ez)
    label: $E_z^2$
  E_ySq:
    expr: sum(ey*ey)
    label: $E_y^2$
  E_xSq:
    expr: sum(ex*ex)
    label: $E_x^2$
  E_tot_Sq:
    expr: sum(ey*ey+ex*ex+ez*ez)
    label: $|E|^2$
  B_zSq:
    expr: sum(bz*bz)
    label: $B_z^2$
  B_tot_Sq:
    expr: sum(bx*bx + by*by + bz*bz)
    label: $|B|^2$
#
# Very similar to flds, basically, imagine scalar_flds except
# a vec field must define a fld quantity for x, y, z, values of the field.
#
#   vec_flds:
#     VEC_FIELD_NAME:     # Name of the vector field for GUI
#       axis_label: LABEL # Label used for the y-axis when vec_fld is plotted 
#                         # as a 1D line
#         x: 
#            label: LABEL # Label uses in the annotation of the field quantity.
#            expr: EXPR   # evaluates to 3D arr of shape (nz, ny, nx)
#
#         # rest should be obvious
#         ....
#         #
vec_flds:
  B:
    axis_label: $B$
    x:
      label: $B_x$
      expr: bx
    y:
      label: $B_y$
      expr: by
    z:
      label: $B_z$
      expr: bz
  E:
    axis_label: $E$
    x:
      label: $E_x$
      expr: ex
    y:
      label: $E_y$
      expr: ey
    z:
      label: $E_z$
      expr: ez
  J:
    axis_label: $J$
    x:
      label: $J_x$
      expr: jx
    y:
      label: $J_y$
      expr: jy
    z:
      label: $J_z$
      expr: jz

spectra:
  energy:
    xlabel: $\gamma - 1$
    ylabel: $f(E)/dE$
    species:
        name_of_spect_class: tristan-v1-spec

#
#  SHOCK FINDERS:
# 
#  shock finders a a little bit complicated expressions.
#  Because it may not be possible to write them as a simple
#  expression that can be parsed at a single output, we chose
#  to define special functions that can take appropriate inputs
#  to calcuate the shock's location.
#
#  See ~/src/utils/shock_finder_methods.py & ~/src/utils/my_parser.py
#  to see how they are defined.
shock_finders:

  Constant Velocity:
    expr: const_vel_shock(getsim())
    axis: x

  Density Half Max:
    expr: dens_half_max_shock(dens, c_omp, istep)
    axis: x
