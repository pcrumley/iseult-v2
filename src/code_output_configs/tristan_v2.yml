name:
  Tristan_v_2
h5_files_list:
  prtl.tot.*:
    - ind_1
    - ind_2
    - wei_1
    - wei_2
    - proc_1
    - proc_2
    - u_1
    - u_2
    - v_1
    - v_2
    - w_1
    - w_2
    - x_1
    - x_2
    - y_1
    - y_2
    - z_1
    - z_2
  flds.tot.*:
    - bx
    - by
    - bz
    - dens1
    - dens2
    - ex
    - ey
    - ez
    - jx
    - jy
    - jz
    - xx
    - yy
    - zz
  domain.*:
    - sx
    - sy
    - sz
  spec.tot.*:
    - who_knows
  params.*:
    - plasma:c_omp
    - output:stride
    - plasma:ppc0
    - output:istep
    - particle:m1
    - particle:m2
    - timestep
    - algorithm:c
    - particle:ch1
    - particle:ch2

axes:
  x:
    label: $x $
    expr: arange(take(shape(bx), 2)) * output:istep / plasma:c_omp
  y:
    label: $y$
    expr: arange(take(shape(bx), 1)) * output:istep / plasma:c_omp
  z:
    label: $z$
    expr: arange(take(shape(bx), 0)) * output:istep / plasma:c_omp
param:
  c_omp:
    expr: plasma:c_omp
  istep:
    expr: output:istep
  me:
    expr: particle:m1
  mi:
    expr: particle:m2
  ppc0:
    expr: plasma:ppc0
  qi:
    expr: particle:ch2
  sigma:
    expr: '1'
  stride:
    expr: output:stride
  time:
    expr: timestep
  btheta:
    expr: '1'
  b0:
    expr: '1'
  e0:
    expr: '1'

prtls:
  electrons:
    hist_cbar_label: $f_e (p)$
    attrs:
      KE:
        expr: sqrt(u_1*u_1 + pow(v_1,2) + w_1*w_1 + 1) - 1
        label: $KE_e$
      gamma:
        expr: sqrt(u_1*u_1 + pow(v_1,2) + w_1*w_1 + 1)
        label: $\gamma_e$
      index:
        expr: ind1
        label: $\mathrm{ind}_e$
      proc:
        expr: proc1
        label: $\mathrm{proc}_e$
      px:
        label: $\gamma_e\beta_{e,x}$
        expr: u_1
      py:
        label: $\gamma_e\beta_{e,y}$
        expr: v_1
      pz:
        label: $\gamma_e\beta_{e,z}$
        expr: w_1
      x:
        label: $x\ [c/\omega_{pe}]$
        expr: x_1 / plasma:c_omp
      y:
        label: $y\ [c/\omega_{pe}]$
        expr: y_1 / plasma:c_omp
      z:
        label: $z\ [c/\omega_{pe}]$
        expr: z_1 / plasma:c_omp
  ions:
    hist_cbar_label: $f_i (p)$
    attrs:
      KE:
        expr: sqrt(u_2*u_2 + pow(v_2,2) + w_2*w_2 + 1) - 1
        label: $KE_i$
      gamma:
        expr: sqrt(u_2*u_2 + pow(v_2,2) + w_2*w_2 + 1)
        label: $\gamma_i$
      index:
        expr: ind2
        label: $\mathrm{ind}_i$
      proc:
        expr: proc2
        label: $\mathrm{proc}_i$
      px:
        label: $\gamma_i\beta_{i,x}$
        expr: u_2
      py:
        label: $\gamma_i\beta_{i,y}$
        expr: v_2
      pz:
        label: $\gamma_i\beta_{i,z}$
        expr: w_2
      x:
        label: $x [c/\omega_{pe}]$
        expr: x_2 / plasma:c_omp
      y:
        label: $y [c/\omega_{pe}]$
        expr: y_2 / plasma:c_omp
      z:
        label: $z [c/\omega_{pe}]$
        expr: z_2 / plasma:c_omp

scalar_flds:
  B_total:
    label: $|B|$
    expr: sqrt(bx*bx + by*by + bz*bz)
  density:
    label: $n$
    expr: dens1 + dens2
  electron_density:
    label: $n_e$
    expr: dens1
  ion_density:
    label: $n_i$
    expr: dens2
  rho:
    label: $\rho$
    expr: dens2 - dens1
  theta_B:
    label: $\theta_B$
    expr: arctan2(sqrt(by*by+bz*bz), bx)

scalars:
  Total KE_e:
    expr: sum((sqrt(u_1 * u_1 + pow(v_1, 2) + w_1 * w_1 + 1) - 1) * wei_1) * output:stride * pow(algorithm:c, 4) * particle:m1 * pow(plasma:c_omp, -2)/ plasma:ppc0
    label: '$KE_e$'
  Total KE_i:
    expr: sum((sqrt(u_2 * u_2 + v_2 * v_2 + w_2 * w_2 + 1) - 1) * wei_2) * output:stride * abs(particle:ch1) * pow(algorithm:c,4)* particle:m2 * pow(plasma:c_omp, -2)/ plasma:ppc0
    label: '$KE_i'
  B_tot_Sq:
    expr: sum(bx*bx + by*by + bz*bz) * pow(output:istep, 2) * 0.5
    label: $|B|^2$
  #const_shock_speed:
  #  expr: ''
  #  label: $v_s$
  #shock_loc:
  #  expr: ''
  #  label: $x_s$

# Must define out to calculate time at each output in units 1/c_omp
time: 'timestep / plasma:c_omp' # a placeholder. need to change

vec_flds:
  B:
    axis_label: $B$
    x:
      label: $B_x$
      expr: bx
    y:
      label: $B_y$
      expr: by
    z:
      label: $B_z$
      expr: bz
  E:
    axis_label: $E$
    x:
      label: $E_x$
      expr: ex
    y:
      label: $E_y$
      expr: ey
    z:
      label: $E_z$
      expr: ez
  J:
    axis_label: $J$
    x:
      label: $J_x$
      expr: jx
    y:
      label: $J_y$
      expr: jy
    z:
      label: $J_z$
      expr: jz

shock_finders:

  Constant Velocity:
    expr: const_vel_shock(getsim())
    axis: x

  Density Half Max:
    expr: dens_half_max_shock(dens1 + dens2, plasma:c_omp, output:istep)
    axis: x
